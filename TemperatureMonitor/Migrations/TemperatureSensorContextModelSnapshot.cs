// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TemperatureMonitor;

namespace TemperatureMonitor.Migrations
{
    [DbContext(typeof(TemperatureSensorContext))]
    partial class TemperatureSensorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("TemperatureMonitor.TemperatureReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<string>("TemperatureSensorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TemperatureSensorId");

                    b.ToTable("TemperatureReading");
                });

            modelBuilder.Entity("TemperatureMonitor.TemperatureSensor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TemperatureSensors");
                });

            modelBuilder.Entity("TemperatureMonitor.TemperatureReading", b =>
                {
                    b.HasOne("TemperatureMonitor.TemperatureSensor", null)
                        .WithMany("TemperatureReadings")
                        .HasForeignKey("TemperatureSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
